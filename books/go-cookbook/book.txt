
1. Using go on Windows
http://stackoverflow.com/questions/1717652/can-go-compiler-be-installed-on-windows
http://code.google.com/p/go/wiki/WindowsPort
http://code.google.com/p/gomingw/downloads/list

Topics:

1. Strings

JavaScript:

1 Concat 2 strings
2 Concat a string and another data type
3 Conditionally compare strings
4 Find a substring in a string
5 Extract substring from a string
6 Checking for existing, non-empty string
7 Breaking keyword string into separate keywords
8 Inserting special characters
9 Processing individual lines of a text area
10 Trimming whitespace from the ends of a string
11 Left- or Righ-Pad a string

Java:

1 Introduction
2 Taking Strings apart with substrings
3 Taking Strings apart with StringTokenizer
4 Putting strings together with +, StringBuilder, StringBuffer
5 Processing a string one character at a time
6 aligning strings
7 convert between unicode characters and strings
8 reversing a string by word or by character
9 expanding and compressing tabs
10 controlling case
11 indenting text documents
12 entering nonprintable characters
13 trimming blanks from end of string (1.10 js)
14 parsing comma-separated data
15 program: a simple text formatter
16 program: soundex name comparisons

Ruby:

1 Build a string from parts
2 Substituting variables into strings
3 Substituting variables into existing string
4 reversing by word or characters
5 representing unprintable characters
6 convert between characters and values
7 convert between strings and symbols
8 process string one char at a time
9 process string one word at a time
10 change case of string
11 managing whtiespace
12 testing if object is string-like
13 get the parts of string you want
14 handle encodings
15 word-wrapping lines of text
16 generating succession  of strings
17 matching strings with regular expressions
18 replacing multiple patterns in a single pass
19 validating an e-mail address
20 classify text with bayesian analyzer


1. Strings

1.1. Introduction: string, []byte, immutability, UTF-8, unicode

There are few important aspects of Go strings that you need to understand.

Strings are immutable - after you create one, you can't modify it.

Unlike most recent languages (Java, C#, Python) that represent strings internally
in UCS-2 encoding, strings in Go are internally an immutable array of bytes ([]byte)
and can be interpreted as UTF-8 encoded unicode strings.

Unicode is an evolving standard (most recent version is 6.0) that standardizes
mapping of more than 100 thousand characters present in various human languages
to unique integers. Unicode was invented because early ways of encoding
strings (e.g. ASCII) used only one byte per character and that's not nearly enough to 
represent characters present in human languages.

UCS-2 encodes each Unicode characters in 2 bytes. UTF-8 is a variable-length
encoding: most frequently used characters are encoded in only one byte but
some characters might need up to 4 bytes.

The advantage of UCS-2 is simplicity of processing. For example, to get
the length of the string we just divide number of bytes by 2. To Get
n-th Uharacter of a Unicode string, we just get 2 bytes at n*2 byte offset.

The disadvantage of USC-2 is that it cannot represent all characters.
There are more than 100 thousand unique characters defined by Unicode
standard but 2 bytes can only represent around 65 thousand unique values.

Another disadvantage is inefficient use of space: most string processed
by real programs use characters that can be represented by one byte
so UCS-2 encoding can double the memory usage.

The disadvantage of UTF-8 encoding is more complex processing if you
want to treat it as a human-language string and not just a sequence
of bytes. For example, determining the length of the string requires
analyzing all bytes of its UTF-8 representation.

Internally strings are an array of arbitrary bytes but one property
of UTF-8 encoding is that not every byte sequence is a valid UTF-8
sequence. Go is lenient and doesn't enforce that a string is a valid
UTF-8 byte sequence.

Go source code is, "by definition":http://golang.org/doc/go_spec.html#Source_code_representation, 
encoded in UTF-8, so every string you enter in the source code will
be a valid UTF-8 sequence. You can, however, create a string backed by
invalid UTF-8 sequence by converting []byte array to a string.
It's fine by Go. The distinction between a logical Unicode
string and it's underlying representation as UTF-8 encoded
sequence of bytes is subtle but important in some contexts.

If you want to know more:

* "Unicode":http://en.wikipedia.org/wiki/Unicode

1.2 









